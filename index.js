import { pool, connectToDb } from './connection.js';
import inquirer from 'inquirer';



async function init() {
    await connectToDb();
    mainMenu();
}


async function mainMenu(){
    const { choice } = await inquirer.prompt({
        name: 'choice',
        type: 'list',
        message: 'What would you like to do?',
        choices: [
            'View All Employees',
            'View All Departments',
            'View All Roles',
            'Add Employee',
            'Add Department',
            'Add Role',
            'Update Employee Role',
            'Quit'
        ]
    });

    switch (choice) {
        case 'View All Employees':
            return viewAllEmployees();
        case 'View All Departments':
            return viewAllDepartments();
        case 'View All Roles':
            return viewAllRoles();
        case 'Add Employee':
            return addEmployee();
        case 'Add Department':
            return addDepartment();
        case 'Add Role':
            return addRole();
        case 'Update Employee Role':
            return updateEmployeeRole();
        case 'Quit':
            console.log('Goodbye!');
            process.exit(0);
    }
}

init();

// async function main() {
//     await connectToDb();
//     // Code to run the application goes here
// }

function viewAllEmployees() {
    pool.query('SELECT * FROM employee;', (err, res) => {
        if (err) throw err;
        // console.log("Database Response: ", res);
        console.table(res.rows);
        mainMenu();
    });
}
function viewAllDepartments() {
    pool.query('SELECT * FROM department;', (err, res) => {
        if (err) throw err;
        console.table(res.rows);
        mainMenu();
    });
}
function viewAllRoles() {
    pool.query('SELECT * FROM role;', (err, res) => {
        if (err) throw err;
        console.table(res.rows);
        mainMenu();
    });
}

// function addEmployee() {
//     pool.query('INSERT INTO employee;', (err, res) => {
//         if (err) throw err;
//         console.table(res.rows);
//         mainMenu();
//     });
// }

const addEmployee = async () => {
    const rolesRes = await pool.query('SELECT * FROM role');
    const roles = rolesRes.rows.map(role => ({
        name: role.title,
        value: role.id
    }));

    const employeesRes = await pool.query('SELECT * FROM employee');
    const employees = employeesRes.rows.map(employee => ({
        name: `${employee.first_name} ${employee.last_name}`,
        value: employee.id
    }));

    const { first_name, last_name, role_id, manager_id } = await inquirer.prompt([
        {
            name: 'first_name',
            type: 'input',
            message: 'Enter the employee\'s first name:'
        },
        {
            name: 'last_name',
            type: 'input',
            message: 'Enter the employee\'s last name:'
        },
        {
            name: 'role_id',
            type: 'list',
            message: 'Select the employee\'s role:',
            choices: roles
        },
        {
            name: 'manager_id',
            type: 'list',
            message: 'Select the employee\'s manager (leave blank for none):',
            choices: [...employees, { name: 'None', value: null }]
        }
    ]);

    try {
 
        await pool.query(
            'INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES ($1, $2, $3, $4)',
            [first_name, last_name, role_id, manager_id]
        );
        console.log('Employee added!');
    } catch (err) {
        console.error('Error adding employee:', err.message);
    }

    mainMenu();  
};


const addDepartment = async () => {
    const { departmentName } = await inquirer.prompt({
        name: 'departmentName',
        type: 'input',
        message: 'Enter the name of the department:'
    });
console.log(departmentName);
    try {
        // We don't need to specify the 'id' since it's auto-generated by SERIAL
        await pool.query('INSERT INTO department (name) VALUES ($1)', [departmentName]);
        console.log('Department added!');
    } catch (err) {
        console.error('Error adding department:', err.message);
    }

    mainMenu();  // Return to the main menu
};


const addRole = async () => {
    const departmentsRes = await pool.query('SELECT * FROM department');
    const departments = departmentsRes.rows.map(department => ({
        name: department.name,
        value: department.id
    }));

    const { title, salary, department_id } = await inquirer.prompt([
        {
            name: 'title',
            type: 'input',
            message: 'Enter the role title:'
        },
        {
            name: 'salary',
            type: 'input',
            message: 'Enter the role salary:'
        },
        {
            name: 'department_id',
            type: 'list',
            message: 'Select the department ID:',
            choices: departments
        }
    ]);

    try {
        // Insert the role into the database with a department_id
        await pool.query('INSERT INTO role (title, salary, department_id) VALUES ($1, $2, $3)', [
            title, salary, department_id
        ]);
        console.log('Role added!');
    } catch (err) {
        console.error('Error adding role:', err.message);
    }

    mainMenu();  // Return to the main menu
};


const updateEmployeeRole = async () => {
    const employeesRes = await pool.query('SELECT * FROM employee;');
    const employees = employeesRes.rows.map(employee => ({ 
        name: `${employee.first_name} ${employee.last_name}`, 
        value: employee.id 
    }));

    const rolesRes = await pool.query('SELECT * FROM role;');
    const roles = rolesRes.rows.map(role => ({ name: role.title, value: role.id }));

    const { employeeId, roleId } = await inquirer.prompt([
        {
            name: 'employeeId',
            type: 'list',
            message: 'Select the employee to update:',
            choices: employees
        },
        {
            name: 'roleId',
            type: 'list',
            message: 'Select the new role:',
            choices: roles
        }
    ]);

    pool.query('UPDATE employee SET role_id = $1 WHERE id = $2;', [roleId, employeeId], (err, res) => {
        if (err) throw err;
        console.log('Employee role updated!');
        mainMenu();
    });
}

// module.exports = { viewAllEmployees }

